package program;

import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.stream.Collectors;

class Employee{
	int empId;
	String empName;
	String empLoc;
	Double Salary;
	public Employee() {
		super();
	}
	
	public Employee(int empId, String empName, String empLoc, Double salary) {
		super();
		this.empId = empId;
		this.empName = empName;
		this.empLoc = empLoc;
		Salary = salary;
	}

	public int getEmpId() {
		return empId;
	}

	public void setEmpId(int empId) {
		this.empId = empId;
	}

	public String getEmpName() {
		return empName;
	}

	public void setEmpName(String empName) {
		this.empName = empName;
	}

	public String getEmpLoc() {
		return empLoc;
	}

	public void setEmpLoc(String empLoc) {
		this.empLoc = empLoc;
	}

	public Double getSalary() {
		return Salary;
	}

	public void setSalary(Double salary) {
		Salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [empId=" + empId + ", empName=" + empName + ", empLoc=" + empLoc + ", Salary=" + Salary + "]";
	}
}
public class Test {
	public static void main(String[] args) {
		Employee emp1=new Employee(100,"Srinivas","Hyderabad",250000.0);
		Employee emp2=new Employee(101,"Sasi","Hyderabad",220000.0);
		Employee emp3=new Employee(102,"Vinay","Chennai",205000.0);
		Employee emp4=new Employee(103,"Swarna","Delhi",255000.0);
		Employee emp5=new Employee(105,"Chandu","Mumbai",300000.0);
		Employee emp6=new Employee(106,"Vineel","Trivendram",210000.0);
		Employee emp7=new Employee(107,"Ram","Vizag",240000.0);
		
		LinkedList<Employee> list=new LinkedList();
		list.add(emp1);
		list.add(emp2);
		list.add(emp7);
		list.add(emp6);
		list.add(emp4);
		list.add(emp5);
		list.add(emp3);
		for (Employee employee : list) {
			System.out.println(employee);
		}
		}
}
//		
//		
////		list.stream()
////		.forEach(a->System.out.println(a));
//		
//		
//		
////		Employee maxSalaryEmp = list.stream()
////                .max(Comparator.comparing(Employee::getSalary))
////                .orElse(null);
////
////        Employee minSalaryEmp = list.stream()
////                .min(Comparator.comparing(Employee::getSalary))
////                .orElse(null);
////
////        System.out.println("Employee with Maximum Salary: " + maxSalaryEmp);
////        System.out.println("Employee with Minimum Salary: " + minSalaryEmp);
//        
//		
//		
//		
//		
//		//Intermediate Methods
//		
//		//limit
//		//skip
//		//filter
//		//sorted
//		//distinct
//		//map
//		//flatMap
//		
//		//to remove duplicate Employees
//        System.out.println(list.stream().distinct().toList());
//        System.out.println();
//        
//        
//        //Employee list who lives in each city
//        System.out.println(list.stream().collect(Collectors.groupingBy(Employee::getEmpLoc)));
//        System.out.println();
//        //min Salary
//        System.out.println(list.stream().sorted((a,b)->a.getSalary().compareTo(b.getSalary())).findFirst().get());
//        
//        //max Salary
//        System.out.println(list.stream().sorted((a,b)->b.getSalary().compareTo(a.getSalary())).findFirst().get());
//       
//        //second max
//        System.out.println(list.stream().sorted((a,b)->b.getSalary().compareTo(a.getSalary())).skip(1).findFirst().get());
//    	
//        
//        //to get top 3 Salaries
//        System.out.println(list.stream().sorted((a,b)->b.getSalary().compareTo(a.getSalary())).limit(3).toList());
//    	System.out.println();
//    	
//    	//to get only names and Salaries
//        System.out.println(list.stream().collect(Collectors.toMap(Employee::getEmpName, Employee::getSalary)));
//	
//	}
//}
